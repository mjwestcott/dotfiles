#!/usr/bin/env bash

version="2.0.0"

usage() {
  cat <<EOF
Usage: wifi-password [options] [ssid]

Retrieve WiFi password from macOS keychain.

Options:
  -q, --quiet      Only output the password (no formatting)
  -r, --qr         Display QR code for network sharing
  -V, --version    Show version
  -h, --help       Show this help message
  --               End of options

Arguments:
  ssid            WiFi network name (uses current network if not specified)

Examples:
  wifi-password                    # Get password for current network
  wifi-password "My Network"       # Get password for specific network
  wifi-password -q "My Network"    # Get password only (for scripts)
  wifi-password -r "My Network"    # Show QR code for easy sharing
EOF
}

# Parse command line options
verbose=1
show_qr=0

while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do
  case $1 in
    -V | --version)
      echo "wifi-password $version"
      exit 0
      ;;
    -q | --quiet)
      verbose=0
      ;;
    -r | --qr)
      show_qr=1
      ;;
    -h | --help)
      usage
      exit 0
      ;;
    *)
      echo "ERROR: Unknown option $1" >&2
      usage
      exit 1
      ;;
  esac
  shift
done

if [[ "$1" == "--" ]]; then shift; fi

# Get SSID from arguments or detect current network
if [ -n "$*" ]; then
  ssid="$*"
else
  # Find WiFi interface dynamically
  wifi_interface=$(networksetup -listallhardwareports | awk '/Wi-Fi|AirPort/{getline; print $NF}')

  if [ -z "$wifi_interface" ]; then
    echo "ERROR: Could not find WiFi interface" >&2
    exit 1
  fi

  # Try modern ipconfig method first (works on macOS Sequoia)
  ssid=$(ipconfig getsummary "$wifi_interface" 2>/dev/null | awk -F ' : ' '/ SSID : / {print $2}')

  # Fallback to networksetup method for older macOS versions
  if [ -z "$ssid" ]; then
    network_info=$(networksetup -getairportnetwork "$wifi_interface" 2>/dev/null)
    if [[ "$network_info" =~ "Current Wi-Fi Network:" ]]; then
      ssid=$(echo "$network_info" | cut -d ':' -f 2- | sed 's/^ *//')
    fi
  fi

  if [ -z "$ssid" ]; then
    echo "ERROR: Could not retrieve current SSID. Are you connected to WiFi?" >&2
    exit 1
  fi
fi

# Display progress if verbose
if [ $verbose -eq 1 ]; then
  echo ""
  echo "🔍 Getting password for \"$ssid\""
  echo "🔐 Keychain prompt may appear..."
fi

# Retrieve password from keychain
password=$(security find-generic-password -D "AirPort network password" -w -a "$ssid" 2>/dev/null)

if [ -z "$password" ]; then
  echo "ERROR: Could not find password for \"$ssid\"" >&2
  echo "       Make sure you've connected to this network before and saved the password." >&2
  exit 1
fi

# Output results
if [ $verbose -eq 1 ]; then
  echo "✅ Password: $password"
  echo ""
else
  echo "$password"
fi

# Show QR code if requested
if [ $show_qr -eq 1 ]; then
  if ! command -v qrencode >/dev/null 2>&1; then
    echo "INFO: Install qrencode to display QR codes: brew install qrencode" >&2
  else
    echo "📱 QR Code for easy sharing:"
    echo "WIFI:T:WPA;S:$ssid;P:$password;;" | qrencode -t ANSIUTF8
    echo ""
  fi
fi
