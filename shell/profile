#!/usr/bin/env bash

# Misc
export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/repos/python
export VIRTUALENVWRAPPER_PYTHON=$(which python)
export FZF_DEFAULT_COMMAND='ag -g ""'
export FZF_DEFAULT_OPTS='--color prompt:4,pointer:1,marker:5,info:2,spinner:5,hl:3,hl+:3,fg:7,fg+:7'
export FZF_TMUX=0
export AGIGNORE="$HOME/dotfiles/ag/agignore"
export PURE_CMD_MAX_EXEC_TIME=0
export GREP_COLOR='30;43'                             # BSD
export GREP_COLORS='mt=30;43:ln=1;33:fn=1;32:se=37'   # GNU
export GOPATH=$HOME/repos/go

# Path
export PATH=$HOME/bin:$PATH
export PATH=$PATH:/usr/local/bin
export PATH=$PATH:/usr/local/opt/bin
export PATH=/usr/local/opt/python/libexec/bin:$PATH  # Python
export PATH=$HOME/.poetry/bin:$PATH                  # Poetry
export PATH=/usr/local/opt/sphinx-doc/bin:$PATH      # Sphinx
export PATH=$PATH:$HOME/.local/bin                   # Haskell/Stack
export PATH=$HOME/.cargo/bin:$PATH                   # Rust
export PATH=$PATH:$GOPATH/bin                        # Go

# https://github.com/brianmario/mysql2/issues/795#issuecomment-337006164
export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/opt/openssl/lib/

# Aliases
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias grep='grep --color=auto'
alias r='ranger'
alias tree='tree --dirsfirst'
alias t='tree -L 1'
alias t2='tree -L 2'
alias t3='tree -L 3'
alias t4='tree -L 4'
alias vi='vim'
alias json='python -m json.tool'
alias dj='python manage.py'
alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'
alias gh='hub browse'
alias pr='hub pull-request'
alias lg='lazygit'
alias rd='redis-cli'
alias cx='kubectx'
alias uuid='python -c "import uuid; print(uuid.uuid4().hex)"'
alias cc='claude'

# Networking
alias up='ping 8.8.8.8'
alias ip='dig +short myip.opendns.com @resolver1.opendns.com'
alias localip="sudo ifconfig | grep -Eo 'inet (addr:)?([0-9]*\\.){3}[0-9]*' | grep -Eo '([0-9]*\\.){3}[0-9]*' | grep -v '127.0.0.1'"

# Python
alias py='python'
alias ipy='ipython'
alias lab='cd ~/repos/python/notebooks && pipenv run jupyter lab'
alias de='deactivate'
alias wk='workon'
alias pyc='find . -name '*.py[co]' -delete && find . -name '__pycache__' -delete'
alias venv='. "$(poetry env info --path)/bin/activate"'

# https://github.com/junegunn/gv.vim
alias gv='vim -c ":GV"'

# AWS
function agp {
    echo "$AWS_PROFILE"
}

function asp {
    export AWS_PROFILE=$1
}

# fasd
alias vim='nvim'
alias j='fasd_jump'
alias v='fasd_vim'

function fasd_jump {
    if [[ -n "${*}" ]]; then
        fasd_cd -d "${*}"
    else
        cd $OLDPWD
    fi
}

function fasd_vim {
    if [[ -n "${*}" ]]; then
        LANG=C fasd -f -t -e vim -b viminfo "${*}"
    else
        vim -c ":Telescope oldfiles"
    fi
}

alias ,j='fzf_jump'
alias ,t='fzf_vim'
alias ,a='fzf_ag'
alias ,h='fzf_hidden'
alias ,g='fzf_regex'
alias ,l='fzf_locate'
alias ,c='fzf_commit'
alias ,b='fzf_branches'
alias ,m='fzf_chrome'

function fzf_jump {
    local file
    file=$(ag -p "$AGIGNORE" -g "" | fzf -q "${*}")
    [[ -n "$file" ]] && cd "$(dirname "$file")"
}

function fzf_vim {
    local file
    file=$(ag -p "$AGIGNORE" -g "" | fzf -q "${*}")
    [[ -n "$file" ]] && vim "$file"
}

# Similar to fzf_vim, but show only hidden files (respecting agignore).
function fzf_hidden {
    local file
    file=$(ag --hidden -f -p "$AGIGNORE" -g "/\..+" --ignore "/.git" | fzf -q "${*}")
    [[ -n "$file" ]] && vim "$file"
}

function fzf_ag {
    local tmp="$TMPDIR/fzf_ag"
    ag "." | fzf -e -m -q "${*}" >| "$tmp"
    [[ -s "$tmp" ]] && vim -q "$tmp"
}

# Similar to fzf_ag, but pass the args through to ag as a regex and filter only the source text.
function fzf_regex {
    local tmp="$TMPDIR/fzf_ag"
    ag "${*}" --color | fzf -e -m --ansi --color=hl:4,hl+:4 --delimiter=':' --nth=3.. >| "$tmp"
    [[ -s "$tmp" ]] && vim -q "$tmp"
}

# Search the whole file system using locate.
function fzf_locate {
    local result
    result=$(locate / | fzf -q "${*}")
    if [[ -d "$result" ]]; then
        cd "$result"
    elif [[ -f "$result" ]]; then
        vim "$result"
    fi
}

# Search git log in fzf.
function fzf_commit {
    local sha
    sha=$(
        git log --pretty=format:"%h %an %ad %s" --date=short |
        fzf -q "${*}" |
        awk -F' ' '{ print $1 }')
    [[ -n "$sha" ]] && git show "$sha"
}

# Checkout git branch/tag, from https://github.com/junegunn/dotfiles/blob/master/bashrc
function fzf_branches {
    local tags branches target
    tags=$(git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
    branches=$(
        git branch --all | grep -v HEAD             |
        sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
        sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
    target=$(
        (echo "$tags"; echo "$branches") |
        fzf-tmux -l40 -- --no-hscroll --ansi +m -d "\t" -n 2 -1 -q "$*") || return
    git checkout $(echo "$target" | awk '{print $2}')
}

function fzf_tmux {
    local session
    session=$(
        tmux list-sessions -F "#{session_name}" |
        fzf --query="$1" --select-1 --exit-0) || return
    tmux switch-client -t "$session"
}

function fzf_chrome {
  local cols sep google_history open
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  if [ "$(uname)" = "Darwin" ]; then
    google_history="$HOME/Library/Application Support/Google/Chrome/Default/History"
    open=open
  else
    google_history="$HOME/.config/google-chrome/Default/History"
    open=xdg-open
  fi
  cp -f "$google_history" /tmp/h
  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs $open > /dev/null 2> /dev/null
}

# Create a new directory and enter it.
function md {
    mkdir -p "$@" && cd "$@"
}

# Create timestamped backup of a file.
function bk {
    cp -a "$1" "${1}_$(date -u +%FT%TZ)"
}

function extract {
    if [[ -f $1 ]]; then
        case $1 in
            *.tar.bz2) tar xjf "$1";;
            *.tar.gz)  tar xzf "$1";;
            *.bz2)     bunzip2 "$1";;
            *.rar)     unrar e "$1";;
            *.gz)      gunzip "$1";;
            *.tar)     tar xf "$1";;
            *.tbz2)    tar xjf "$1";;
            *.tgz)     tar xzf "$1";;
            *.zip)     unzip "$1";;
            *.Z)       uncompress "$1";;
            *.7z)      7z x "$1";;
            *)         echo "'$1' cannot be extracted via extract()";;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

function colours {
    for code in $(seq 255 0); do
        echo -e "\e[38;5;${code}m"'\\e[38;5;'"${code}m\e[0m"
    done
}

# Source extra config
[[ -f ~/dotfiles/private ]] && source ~/dotfiles/private
[[ -f ~/dotfiles/shell/analytics ]] && source ~/dotfiles/shell/analytics
