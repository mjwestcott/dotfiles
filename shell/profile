# shellcheck shell=bash
#
# XDG directories
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_STATE_HOME="$HOME/.local/state"

# Misc
export FZF_DEFAULT_COMMAND='rg --files'
export FZF_DEFAULT_OPTS='--color prompt:4,pointer:1,marker:5,info:2,spinner:5,hl:3,hl+:3,fg:7,fg+:7'
export FZF_TMUX=0
export PURE_CMD_MAX_EXEC_TIME=0
export GREP_COLOR='30;43'                             # BSD
export GREP_COLORS='mt=30;43:ln=1;33:fn=1;32:se=37'   # GNU
export GOPATH=$HOME/repos/go

# Path
export PATH=$HOME/bin:$PATH
export PATH=$HOME/.cargo/bin:$PATH                      # Rust
export PATH=$HOME/.local/share/pypoetry/venv/bin:$PATH  # Poetry
export PATH=$HOME/.local/bin:$PATH                      # User binaries
export PATH=/usr/local/opt/python/libexec/bin:$PATH     # Python
export PATH=/usr/local/opt/bin:$PATH                    # Homebrew
export PATH=/usr/local/bin:$PATH                        # System
export PATH=$PATH:$GOPATH/bin                           # Go (append to avoid conflicts)

# https://github.com/brianmario/mysql2/issues/795#issuecomment-337006164
export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/opt/openssl/lib/

# Aliases
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias r='ranger'
alias b='br'
alias g="git"
alias gv='nvim -c ":GV"'
alias j='z'
alias v='nvim -c "autocmd VimEnter * ++once Telescope oldfiles"'
alias vi='nvim'
alias vim='nvim'
alias pr='gh pr create'
alias rd='redis-cli'
alias cx='kubectx'
alias ls='eza'
alias ll='eza -l'
alias la='eza -la'
alias lt='eza --tree'
alias tree='eza --tree --git-ignore'
alias t='eza --tree -L 1'
alias t2='eza --tree -L 2'
alias t3='eza --tree -L 3'
alias t4='eza --tree -L 4'
alias cat='bat --paging=never'
alias less='bat --paging=always'
alias ps='procs'
alias du='dust'
alias top='btm'
alias htop='btm'
alias man='tldr'
alias cloc='tokei'
alias youtube-dl='yt-dlp'

# Claude Code
alias c='claude'
alias clc='claude --continue'
alias clr='claude --resume'
alias clp='claude --print'

function todo() {
    claude --print --permission-mode="acceptEdits" "/todo $*"
}

# Scripts/tools
alias wifi='~/dotfiles/bin/wifi-password'
alias bench='~/dotfiles/tools/zsh-bench/zsh-bench'
alias json='python -m json.tool'
alias uuid='python -c "import uuid; print(uuid.uuid4().hex)"'
alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'

# Networking
alias up='ping 8.8.8.8'
alias ip='dig +short myip.opendns.com @resolver1.opendns.com'
alias localip="sudo ifconfig | grep -Eo 'inet (addr:)?([0-9]*\\.){3}[0-9]*' | grep -Eo '([0-9]*\\.){3}[0-9]*' | grep -v '127.0.0.1'"

# Python
alias py='python'
alias ipy='ipython'
alias pyc='find . -name "*.py[co]" -delete && find . -name "__pycache__" -delete'
alias uvi='uv pip install'
alias uvs='uv pip sync'
alias uvl='uv pip list'
alias uvr='uv run'

# Git log format variables
_git_log_medium_format='%C(bold)Commit:%C(reset) %C(yellow)%H%C(red)%d%n%C(bold)Author:%C(reset) %C(green)%an <%ae>%n%C(bold)Date:%C(reset)   %C(blue)%ai (%ar)%C(reset)%n%+B'
_git_log_oneline_format='%C(yellow)%h %C(green)%an %C(blue)%ar%C(reset) %s%C(red)%d%C(reset)'
_git_log_graph_format='%C(yellow)%h %C(green)%an%C(reset) %s%C(red)%d%C(reset)%n'
_git_log_brief_format='%C(yellow)%h %C(reset)%s%n%C(blue)(%ar by %an)%C(red)%d%C(reset)%n'

# Branch (b)
alias gb='git branch'
alias gbc='git checkout -b'
alias gbl='git branch -v'
alias gbL='git branch -av'
alias gbx='git branch -d'
alias gbX='git branch -D'
alias gbm='git branch -m'
alias gbM='git branch -M'
alias gbs='git show-branch'
alias gbS='git show-branch -a'

# Commit (c)
alias gc='git commit --verbose'
alias gca='git commit --verbose --all'
alias gcm='git commit --message'
alias gco='git checkout'
alias gcO='git checkout --patch'
alias gcf='git commit --amend --reuse-message HEAD'
alias gcF='git commit --verbose --amend'
alias gcp='git cherry-pick --ff'
alias gcP='git cherry-pick --no-commit'
alias gcr='git revert'
alias gcR='git reset "HEAD^"'
alias gcs='git show'
alias gcl='git reflog'
alias gcom='git checkout master'

# Conflict (C)
alias gCl='git status | sed -n "s/^.*both [a-z]*ed: *//p"'
alias gCa='git add $(gCl)'
alias gCe='git mergetool $(gCl)'
alias gCo='git checkout --ours --'
alias gCO='gCo $(gCl)'
alias gCt='git checkout --theirs --'
alias gCT='gCt $(gCl)'

# Data (d)
alias gd='git ls-files'
alias gdc='git ls-files --cached'
alias gdx='git ls-files --deleted'
alias gdm='git ls-files --modified'
alias gdu='git ls-files --other --exclude-standard'
alias gdk='git ls-files --killed'
alias gdi='git status --porcelain --short --ignored | sed -n "s/^!! //p"'

# Fetch (f)
alias gf='git fetch'
alias gfc='git clone'
alias gfm='git pull'
alias gfr='git pull --rebase'

# Grep (g)
alias gg='git grep'
alias ggi='git grep --ignore-case'
alias ggl='git grep --files-with-matches'
alias ggL='git grep --files-without-matches'
alias ggv='git grep --invert-match'
alias ggw='git grep --word-regexp'

# Index (i)
alias gia='git add'
alias giA='git add --patch'
alias giu='git add --update'
alias gid='git diff --no-ext-diff --cached'
alias giD='git diff --no-ext-diff --cached --word-diff'
alias gir='git reset'
alias giR='git reset --patch'
alias gix='git rm -r --cached'
alias giX='git rm -rf --cached'

# Log (l)
alias gl='git log --topo-order --pretty=format:"${_git_log_medium_format}"'
alias gls='git log --topo-order --stat --pretty=format:"${_git_log_medium_format}"'
alias gld='git log --topo-order --stat --patch --full-diff --pretty=format:"${_git_log_medium_format}"'
alias glo='git log --topo-order --pretty=format:"${_git_log_oneline_format}"'
alias glg='git log --topo-order --all --graph --pretty=format:"${_git_log_graph_format}"'
alias glb='git log --topo-order --pretty=format:"${_git_log_brief_format}"'
alias glc='git shortlog --summary --numbered'
alias glS='git log --patch --pretty=format:"${_git_log_oneline_format}" -S'
alias glG='git log --pretty=format:"${_git_log_oneline_format}" --grep'

# Merge (m)
alias gm='git merge'
alias gmC='git merge --no-commit'
alias gmF='git merge --no-ff'
alias gma='git merge --abort'
alias gmt='git mergetool'

# Push (p)
alias gp='git push'
alias gpf='git push --force'
alias gpa='git push --all'
alias gpA='git push --all && git push --tags'
alias gpt='git push --tags'
alias gpc='git push --set-upstream origin "$(git branch --show-current 2> /dev/null)"'
alias gpp='git pull origin "$(git branch --show-current 2> /dev/null)" && git push origin "$(git branch --show-current 2> /dev/null)"'

# Rebase (r)
alias gr='git rebase'
alias gra='git rebase --abort'
alias grc='git rebase --continue'
alias gri='git rebase --interactive'
alias grs='git rebase --skip'

# Remote (R)
alias gR='git remote'
alias gRl='git remote --verbose'
alias gRa='git remote add'
alias gRx='git remote rm'
alias gRm='git remote rename'
alias gRu='git remote update'
alias gRp='git remote prune'
alias gRs='git remote show'
alias gRb='git-hub-browse'

# Stash (s)
alias gs='git stash'
alias gsa='git stash apply'
alias gsx='git stash drop'
alias gsX='git-stash-clear-interactive'
alias gsl='git stash list'
alias gsL='git-stash-dropped'
alias gsd='git stash show --patch --stat'
alias gsp='git stash pop'
alias gsr='git-stash-recover'
alias gss='git stash save --include-untracked'
alias gsS='git stash save --patch --no-keep-index'
alias gsw='git stash save --include-untracked --keep-index'

# Submodule (S)
alias gS='git submodule'
alias gSa='git submodule add'
alias gSf='git submodule foreach'
alias gSi='git submodule init'
alias gSI='git submodule update --init --recursive'
alias gSl='git submodule status'
alias gSm='git-submodule-move'
alias gSs='git submodule sync'
alias gSu='git submodule foreach git pull origin master'
alias gSx='git-submodule-remove'

# Working Copy (w)
alias gws='git status --short'
alias gwS='git status'
alias gwd='git diff --no-ext-diff'
alias gwD='git diff --no-ext-diff --word-diff'
alias gwf='git -c delta.side-by-side=true diff'
alias gwr='git reset --soft'
alias gwR='git reset --hard'
alias gwc='git clean -n'
alias gwC='git clean -f'
alias gwx='git rm -r'
alias gwX='git rm -rf'

# FZF aliases
alias ,j='fzf_jump'
alias ,t='fzf_vim'
alias ,a='fzf_rg'
alias ,h='fzf_hidden'
alias ,g='fzf_regex'
alias ,l='fzf_locate'
alias ,c='fzf_commit'
alias ,b='fzf_branches'
alias ,m='fzf_chrome'

function fzf_jump {
    local file
    file=$(rg --files | fzf -q "${*}")
    [[ -n "$file" ]] && cd "$(dirname "$file")" || return
}

function fzf_vim {
    local file
    file=$(rg --files | fzf -q "${*}")
    [[ -n "$file" ]] && vim "$file"
}

# Similar to fzf_vim, but show only hidden files.
function fzf_hidden {
    local file
    file=$(rg --hidden --files | fzf -q "${*}")
    [[ -n "$file" ]] && vim "$file"
}

function fzf_rg {
    local tmp="$TMPDIR/fzf_rg"
    rg . | fzf -e -m -q "${*}" >| "$tmp"
    [[ -s "$tmp" ]] && vim -q "$tmp"
}

# Similar to fzf_rg, but pass the args through to rg as a regex and filter only the source text.
function fzf_regex {
    local tmp="$TMPDIR/fzf_rg"
    rg "${*}" --color=always | fzf -e -m --ansi --color=hl:4,hl+:4 --delimiter=':' --nth=3.. >| "$tmp"
    [[ -s "$tmp" ]] && vim -q "$tmp"
}

# Search the whole file system using locate.
function fzf_locate {
    local result
    result=$(locate / | fzf -q "${*}")
    if [[ -d "$result" ]]; then
        cd "$result" || return
    elif [[ -f "$result" ]]; then
        vim "$result"
    fi
}

# Search git log in fzf.
function fzf_commit {
    local sha
    sha=$(
        git log --pretty=format:"%h %an %ad %s" --date=short |
        fzf -q "${*}" |
        awk -F' ' '{ print $1 }')
    [[ -n "$sha" ]] && git show "$sha"
}

# Checkout git branch/tag, from https://github.com/junegunn/dotfiles/blob/master/bashrc
function fzf_branches {
    local tags branches target
    tags=$(git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
    branches=$(
        git branch --all | grep -v HEAD             |
        sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
        sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
    target=$(
        (echo "$tags"; echo "$branches") |
        fzf-tmux -l40 -- --no-hscroll --ansi +m -d "\t" -n 2 -1 -q "$*") || return
    git checkout "$(echo "$target" | awk '{print $2}')"
}

function fzf_tmux {
    local session
    session=$(
        tmux list-sessions -F "#{session_name}" |
        fzf --query="$1" --select-1 --exit-0) || return
    tmux switch-client -t "$session"
}

function fzf_chrome {
  local cols sep google_history open
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  if [ "$(uname)" = "Darwin" ]; then
    google_history="$HOME/Library/Application Support/Google/Chrome/Default/History"
    open=open
  else
    google_history="$HOME/.config/google-chrome/Default/History"
    open=xdg-open
  fi
  cp -f "$google_history" /tmp/h
  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs $open > /dev/null 2> /dev/null
}

# Create timestamped backup of a file.
function bk {
    cp -a "$1" "${1}_$(date -u +%FT%TZ)"
}

function extract {
    if [[ -f $1 ]]; then
        case $1 in
            *.tar.bz2) tar xjf "$1";;
            *.tar.gz)  tar xzf "$1";;
            *.bz2)     bunzip2 "$1";;
            *.rar)     unrar e "$1";;
            *.gz)      gunzip "$1";;
            *.tar)     tar xf "$1";;
            *.tbz2)    tar xjf "$1";;
            *.tgz)     tar xzf "$1";;
            *.zip)     unzip "$1";;
            *.Z)       uncompress "$1";;
            *.7z)      7z x "$1";;
            *)         echo "'$1' cannot be extracted via extract()";;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

function colours {
    for code in $(seq 255 0); do
        echo -e "\e[38;5;${code}m"'\\e[38;5;'"${code}m\e[0m"
    done
}

# Source extra config
[[ -f ~/dotfiles/private ]] && source ~/dotfiles/private
[[ -f ~/dotfiles/shell/analytics ]] && source ~/dotfiles/shell/analytics
