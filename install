#!/usr/bin/env bash
#
# Idempotent installation script for macOS dotfiles environment

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Colour

# Helper functions
info() { echo -e "${GREEN}[INFO]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; exit 1; }

# Check we're on macOS
if [[ $(uname -s) != 'Darwin' ]]; then
    error "This script is for macOS only"
fi

# Check dotfiles directory exists
if [[ ! -e ~/dotfiles ]]; then
    error "~/dotfiles does not exist. Clone the repository first: git clone https://github.com/mjwestcott/dotfiles.git ~/dotfiles"
fi

info "Starting dotfiles installation..."

# ============================================================================
# Homebrew
# ============================================================================
if [[ -z "$(command -v brew)" ]]; then
    info "Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
else
    info "Homebrew already installed"
fi

# Install packages from Brewfile
info "Installing/updating packages from Brewfile..."
brew bundle --file=~/dotfiles/Brewfile

# ============================================================================
# Development Tools
# ============================================================================

# Rust
if command -v rustc &> /dev/null; then
    info "Rust already installed ($(rustc --version))"
else
    info "Installing Rust..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source "$HOME/.cargo/env"
fi

# Python package management (install Poetry for legacy projects)
if command -v uv &> /dev/null; then
    if command -v poetry &> /dev/null; then
        info "Poetry already installed"
    else
        info "Installing Poetry via uv..."
        uv tool install poetry
    fi
else
    warn "Neither uv nor pipx found, skipping Poetry installation"
fi

# ============================================================================
# Shell and Plugin Managers
# ============================================================================

# Antidote (Zsh plugin manager)
if [[ -e ~/.antidote ]]; then
    info "Antidote already installed, updating..."
    cd ~/.antidote && git pull --quiet
else
    info "Installing Antidote..."
    git clone --depth=1 https://github.com/mattmc3/antidote.git ~/.antidote
fi


# Tmux Plugin Manager
if [[ -e ~/.tmux/plugins/tpm ]]; then
    info "TPM already installed, updating..."
    cd ~/.tmux/plugins/tpm && git pull --quiet
else
    info "Installing Tmux Plugin Manager..."
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi

# zsh-bench (shell performance monitoring)
if [[ -e ~/dotfiles/tools/zsh-bench ]]; then
    info "zsh-bench already installed, updating..."
    cd ~/dotfiles/tools/zsh-bench && git pull --quiet
else
    info "Installing zsh-bench..."
    mkdir -p ~/dotfiles/tools
    git clone --depth=1 https://github.com/romkatv/zsh-bench.git ~/dotfiles/tools/zsh-bench
fi

# ============================================================================
# Dotfiles Symlinks
# ============================================================================

info "Creating dotfiles symlinks..."

# Function to create a symlink with smart backup
create_symlink() {
    local source="$1"
    local target="$2"
    
    # If target already points to the correct source, skip
    if [[ -L "$target" ]] && [[ "$(readlink "$target")" == "$source" ]]; then
        return 0
    fi
    
    # If target exists and is not a symlink to our dotfiles, back it up
    if [[ -e "$target" ]] && [[ ! -L "$target" || "$(readlink "$target")" != "$source" ]]; then
        local backup_dir=~/dotfiles/backup/$(date +%Y%m%d_%H%M%S)
        mkdir -p "$backup_dir"
        mv "$target" "$backup_dir/$(basename "$target")"
        warn "Backed up existing $(basename "$target") to $backup_dir"
    fi
    
    # Create the symlink
    ln -sfn "$source" "$target"
}

# Shell configs and other dotfiles
cd ~/dotfiles
for path in shell/zsh/* readline/* git/* tmux/tmux.conf rg/rgignore conda/*; do
    if [[ -e "$path" ]]; then
        file=$(basename "$path")
        create_symlink "$HOME/dotfiles/$path" "$HOME/.$file"
    fi
done

# Plugin manager configurations
create_symlink ~/dotfiles/antidote/zsh_plugins.txt ~/.zsh_plugins.txt

# .config directory symlinks
mkdir -p ~/.config

# Neovim
mkdir -p ~/.config/nvim
create_symlink ~/dotfiles/vim/init.lua ~/.config/nvim/init.lua
create_symlink ~/dotfiles/vim/lua ~/.config/nvim/lua

# Database CLIs
mkdir -p ~/.config/pgcli
create_symlink ~/dotfiles/pgcli/config ~/.config/pgcli/config

mkdir -p ~/.config/litecli
create_symlink ~/dotfiles/litecli/config ~/.config/litecli/config

# Terminal and prompt
mkdir -p ~/.config/alacritty
create_symlink ~/dotfiles/alacritty/alacritty.toml ~/.config/alacritty/alacritty.toml
create_symlink ~/dotfiles/starship/starship.toml ~/.config/starship.toml

# Ranger file manager
mkdir -p ~/.config/ranger/colorschemes
create_symlink ~/dotfiles/ranger/rc.conf ~/.config/ranger/rc.conf
create_symlink ~/dotfiles/ranger/scope.sh ~/.config/ranger/scope.sh
create_symlink ~/dotfiles/ranger/rifle.conf ~/.config/ranger/rifle.conf
create_symlink ~/dotfiles/ranger/zenburn.py ~/.config/ranger/colorschemes/zenburn.py

# Bat (better cat)
mkdir -p ~/.config/bat
create_symlink ~/dotfiles/bat/config ~/.config/bat/config

# Karabiner
create_symlink ~/dotfiles/karabiner/karabiner.edn ~/.config/karabiner.edn

# Claude config
mkdir -p ~/.claude
create_symlink ~/dotfiles/claude/settings.json ~/.claude/settings.json
create_symlink ~/dotfiles/claude/statusline.sh ~/.claude/statusline.sh

# User bin directory
mkdir -p ~/bin
cd ~/dotfiles/bin
for file in *; do
    if [[ -f "$file" ]]; then
        create_symlink "$HOME/dotfiles/bin/$file" "$HOME/bin/$file"
    fi
done

# ============================================================================
# Final Steps
# ============================================================================

info "Installation complete!"
echo
echo "Next manual steps:"
echo "  1. Change default shell: chsh -s \$(which zsh)"
echo "  2. Restart your terminal or run: source ~/.zshrc"
echo "  3. Install Vim plugins: Open nvim and run :Lazy install"
echo "  4. Install Tmux plugins: Start tmux and press prefix + I"
echo "  5. Set up GitHub SSH keys"
echo "  6. Configure Git signing keys"
echo "  7. Start any required Homebrew services"
echo
echo "To update in the future, run this script again."
