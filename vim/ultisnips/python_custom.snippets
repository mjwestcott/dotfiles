priority -50

extends python

####################
#  Python Recipes  #
####################

snippet ilen "Return length exhausting an iterator"
def ilen(it):
    """Return length exhausting an iterator"""
    return sum(1 for _ in it)
endsnippet

snippet gcd "Return greatest common divisor of a and b"
def greatest_common_divisor(a, b):
    """Return greatest common divisor of a and b"""
    return (greatest_common_divisor(b, a % b) if b else a)
endsnippet

snippet lcm "Return least common multiple of a and b"
def least_common_multiple(a, b):
    """Return least common multiples of a and b"""
    return (a * b) / greatest_common_divisor(a, b)
endsnippet

snippet compact "Filter None values from iterator"
def compact(it):
    """Filter None values from iterator"""
    return ifilter(bool, it)
endsnippet

snippet compose "Compose two functions"
def compose(f, g):
    "Compose two functions: compose(f, g)(x) -> f(g(x))"
    def _wrapper(*args, **kwargs):
        return f(g(*args, **kwargs))
    return _wrapper
endsnippet

snippet drop "Drop n elements from iterable and return the rest as an iterator"
from itertools import islice
def drop(n, iterable):
    "Drop n elements from iterable and return the rest as an iterator"
    return islice(iterable, n, None)
endsnippet

snippet take "Return first n items of the iterable as a list"
from itertools import islice
def take(n, iterable):
    "Return first n items of the iterable as a list"
    return list(islice(iterable, n))
endsnippet

snippet take_every "Take an element from iterable every n elements"
from itertools import islice
def take_every(n, iterable):
    """Take an element from iterable every n elements"""
    return islice(iterable, 0, None, n)
endsnippet

snippet tabulate "Return function(0), function(1), ..."
from itertools import count
def tabulate(function, start=0):
    "Return function(0), function(1), ..."
    return map(function, count(start))
endsnippet

snippet consume "Advance the iterator n-steps ahead. If n is none, consume entirely."
import collections
from itertools import islice
def consume(iterator, n):
    "Advance the iterator n-steps ahead. If n is none, consume entirely."
    # Use functions that consume iterators at C speed.
    if n is None:
        # feed the entire iterator into a zero-length deque
        collections.deque(iterator, maxlen=0)
    else:
        # advance to the empty slice starting at position n
        next(islice(iterator, n, n), None)
endsnippet

snippet nth "Returns the nth item or a default value"
from itertools import islice
def nth(iterable, n, default=None):
    "Returns the nth item or a default value"
    return next(islice(iterable, n, None), default)
endsnippet

snippet quantify "Count how many times the predicate is true"
def quantify(iterable, pred=bool):
    "Count how many times the predicate is true"
    return sum(map(pred, iterable))
endsnippet

snippet padnone "Returns the sequence elements and then returns None indefinitely."
from itertools import chain
def padnone(iterable):
    """Returns the sequence elements and then returns None indefinitely.

    Useful for emulating the behavior of the built-in map() function.
    """
    return chain(iterable, repeat(None))
endsnippet

snippet ncycles "Returns the sequence elements n times"
from itertools import chain, repeat
def ncycles(iterable, n):
    "Returns the sequence elements n times"
    return chain.from_iterable(repeat(tuple(iterable), n))
endsnippet

snippet dotproduct "sum(map(operator.mul, vec1, vec2))"
import operator
def dotproduct(vec1, vec2):
    return sum(map(operator.mul, vec1, vec2))
endsnippet

snippet flatten "Flatten one level of nesting"
from itertools import chain
def flatten(listOfLists):
    "Flatten one level of nesting"
    return chain.from_iterable(listOfLists)
endsnippet

snippet repeatfunc "Repeat calls to func with specified arguments"
from itertools import starmap
def repeatfunc(func, times=None, *args):
    """Repeat calls to func with specified arguments.

    Example:  repeatfunc(random.random)
    """
    if times is None:
        return starmap(func, repeat(args))
    return starmap(func, repeat(args, times))
endsnippet

snippet pairwise "s -> (s0,s1), (s1,s2), (s2, s3), ..."
from itertools import tee
def pairwise(iterable):
    "s -> (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)
endsnippet

snippet grouper "Collect data into fixed-length chunks or blocks"
from itertools import zip_longest
def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx"
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)
endsnippet

snippet roundrobin "roundrobin('ABC', 'D', 'EF') --> A D E B F C"
from itertools import cycle, islice
def roundrobin(*iterables):
    "roundrobin('ABC', 'D', 'EF') --> A D E B F C"
    # Recipe credited to George Sakkis
    pending = len(iterables)
    nexts = cycle(iter(it).__next__ for it in iterables)
    while pending:
        try:
            for next in nexts:
                yield next()
        except StopIteration:
            pending -= 1
            nexts = cycle(islice(nexts, pending))
endsnippet

snippet partition "Use a predicate to partition entries into false entries and true entries"
from itertools import tee, filterfalse
def partition(pred, iterable):
    "Use a predicate to partition entries into false entries and true entries"
    # partition(is_odd, range(10)) --> 0 2 4 6 8   and  1 3 5 7 9
    t1, t2 = tee(iterable)
    return filterfalse(pred, t1), filter(pred, t2)
endsnippet

snippet powerset "powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
from itertools import chain, combinations
def powerset(iterable):
    "powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))
endsnippet

snippet unique_everseen "List unique elements, preserving order. Remember all elements ever seen."
from itertools import filterfalse
def unique_everseen(iterable, key=None):
    "List unique elements, preserving order. Remember all elements ever seen."
    # unique_everseen('AAAABBBCCDAABBB') --> A B C D
    # unique_everseen('ABBCcAD', str.lower) --> A B C D
    seen = set()
    seen_add = seen.add
    if key is None:
        for element in filterfalse(seen.__contains__, iterable):
            seen_add(element)
            yield element
    else:
        for element in iterable:
            k = key(element)
            if k not in seen:
                seen_add(k)
                yield element
endsnippet

snippet unique_justseen "List unique elements, preserving order. Remember only the element just seen."
from itertools import groupby
from operator import itemgetter
def unique_justseen(iterable, key=None):
    "List unique elements, preserving order. Remember only the element just seen."
    # unique_justseen('AAAABBBCCDAABBB') --> A B C D A B
    # unique_justseen('ABBCcAD', str.lower) --> A B C A D
    return map(next, map(itemgetter(1), groupby(iterable, key)))
endsnippet

snippet iter_except "Call a function repeatedly until an exception is raised."
def iter_except(func, exception, first=None):
    """ Call a function repeatedly until an exception is raised.

    Converts a call-until-exception interface to an iterator interface.
    Like builtins.iter(func, sentinel) but uses an exception instead
    of a sentinel to end the loop.

    Examples:
        iter_except(functools.partial(heappop, h), IndexError)   # priority queue iterator
        iter_except(d.popitem, KeyError)                         # non-blocking dict iterator
        iter_except(d.popleft, IndexError)                       # non-blocking deque iterator
        iter_except(q.get_nowait, Queue.Empty)                   # loop over a producer Queue
        iter_except(s.pop, KeyError)                             # non-blocking set iterator

    """
    try:
        if first is not None:
            yield first()            # For database APIs needing an initial cast to db.first()
        while 1:
            yield func()
    except exception:
        pass
endsnippet

snippet first_true "Returns the first true value in the iterable"
def first_true(iterable, default=False, pred=None):
    """Returns the first true value in the iterable.

    If no true value is found, returns *default*

    If *pred* is not None, returns the first item
    for which pred(item) is true.

    """
    # first_true([a,b,c], x) --> a or b or c or x
    # first_true([a,b], x, f) --> a if f(a) else b if f(b) else x
    return next(filter(pred, iterable), default)
endsnippet

snippet random_product "Random selection from itertools.product(*args, **kwds)"
import random
def random_product(*args, repeat=1):
    "Random selection from itertools.product(*args, **kwds)"
    pools = [tuple(pool) for pool in args] * repeat
    return tuple(random.choice(pool) for pool in pools)
endsnippet

snippet random_permutation "Random selection from itertools.permutations(iterable, r)"
import random
def random_permutation(iterable, r=None):
    "Random selection from itertools.permutations(iterable, r)"
    pool = tuple(iterable)
    r = len(pool) if r is None else r
    return tuple(random.sample(pool, r))
endsnippet

snippet random_combination "Random selection from itertools.combinations(iterable, r)"
import random
def random_combination(iterable, r):
    "Random selection from itertools.combinations(iterable, r)"
    pool = tuple(iterable)
    n = len(pool)
    indices = sorted(random.sample(range(n), r))
    return tuple(pool[i] for i in indices)
endsnippet

snippet random_combination_with_replacement "Random selection from itertools.combinations_with_replacement(iterable, r)"
import random
def random_combination_with_replacement(iterable, r):
    "Random selection from itertools.combinations_with_replacement(iterable, r)"
    pool = tuple(iterable)
    n = len(pool)
    indices = sorted(random.randrange(n) for i in range(r))
    return tuple(pool[i] for i in indices)
endsnippet

snippet trace "Trace a function's call stack visually (from Norvig on Udacity)"
from functools import wraps
def trace(f):
    indent = "   "

    @wraps(f)
    def _f(*args):
        signature = "{}({})".format(f.__name__, ", ".join(map(repr, args)))
        print("{}--> {}".format(trace.level * indent, signature))
        trace.level += 1
        try:
            result = f(*args)
            print("{}<-- {} == {}".format((trace.level - 1) * indent,
                                          signature, result))
        finally:
            trace.level -= 1
        return result

    trace.level = 0
    return _f
endsnippet

snippet printf "Use the python3-style print function in python2"
from __future__ import print_function
endsnippet

snippet div "Use true division throughout the module (Py <= 2.7)"
from __future__ import division
endsnippet

snippet struct "The SimpleNamespace class from the Python docs (see also 2nd Ed. §4.18 and AI:MA)"
class ${1:Struct}${2:(object)}:
    ${3:"""Create an instance with argument=value slots.
    This is for making a lightweight object whose class doesn't matter."""}
    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)

    def __repr__(self):
        keys = sorted(self.__dict__)
        items = ("{}={!r}".format(k, self.__dict__[k]) for k in keys)
        return "{}({})".format(type(self).__name__, ", ".join(items))

    def __eq__(self, other):
        return self.__dict__ == other.__dict__
endsnippet

snippet namespace "A Simple Namespace class; Py >= 3.3"
from types import SimpleNamespace
endsnippet

snippet memo "Memoizing using functools and LRU cache; Py >= 3.2"
from functools import lru_cache
@lru_cache(maxsize=${1:None})${0}
endsnippet

snippet memo "Memoizing (Caching) the Return Values of Functions (2nd Ed. §18.5)"
def memoize(f):
    """Memoization decorator for a function taking one or more arguments."""
    class memodict(dict):
        def __getitem__(self, *key):
            return dict.__getitem__(self, key)

        def __missing__(self, key):
            ret = self[key] = f(*key)
            return ret

    return memodict().__getitem__
endsnippet

snippet memo "Memoize decorator from github.com/tokland/pyeuler"
def memoize(f, maxcache=None, cache={}):
    """Decorator to keep a cache of input/output for a given function"""
    cachelen = [0]
    def g(*args, **kwargs):
        key = (f, tuple(args), frozenset(kwargs.items()))
        if maxcache is not None and cachelen[0] >= maxcache:
            return f(*args, **kwargs)
        if key not in cache:
            cache[key] = f(*args, **kwargs)
            cachelen[0] += 1
        return cache[key]
    return g
endsnippet

snippet memomut "Memoize decorator for mutable arguments"
class memoize_mutable:
    """Memoize functions with mutable arguments."""
    # Attributed to Alex Martelli: http://stackoverflow.com/a/4669720
    def __init__(self, fn):
        self.fn = fn
        self.memo = {}
    def __call__(self, *args, **kwds):
        import pickle
        str = pickle.dumps(args, 1) + pickle.dumps(kwds, 1)
        if str not in self.memo:
            # print("miss")  # DEBUG INFO
            self.memo[str] = self.fn(*args, **kwds)
        # else:
            # print("hit")  # DEBUG INFO
        return self.memo[str]
endsnippet

snippet tail "Tail recursive decorator"
class tail_recursive(object):
    """Tail recursive decorator."""
    # George Sakkis's version: http://code.activestate.com/recipes/496691/#c3
    def __init__(self, func):
        self.func = func
        self.firstcall = True
        self.CONTINUE = object()

    def __call__(self, *args, **kwd):
        if self.firstcall:
            func = self.func
            CONTINUE = self.CONTINUE
            self.firstcall = False
            try:
                while True:
                    result = func(*args, **kwd)
                    if result is CONTINUE: # update arguments
                        args, kwd = self.argskwd
                    else: # last call
                        return result
            finally:
                self.firstcall = True
        else: # return the arguments of the tail call
            self.argskwd = args, kwd
            return self.CONTINUE
endsnippet

snippet persistent "Persistence decorator from github.com/tokland/pyeuler"
from itertools import islice, tee
class persistent(object):
    def __init__(self, it):
        self.it = it

    def __getitem__(self, x):
        self.it, temp = tee(self.it)
        if type(x) is slice:
            return list(islice(temp, x.start, x.stop, x.step))
        else:
            return islice(temp, x, x+1).next()

    def __iter__(self):
        self.it, temp = tee(self.it)
        return temp
endsnippet

snippet dictsort "Sorting a Dict by Keys, Return Values List (2nd Ed. §5.1 p.195)"
def sorted_dict_values(d, reverse=False):
    """Returns a list of the values in a dict, sorted by the keys."""
    keys = d.keys()
    keys.sort(reverse=reverse)
    return [d[key] for key in keys]
endsnippet

snippet dictsort "Sorting a Dict by Values, Return Keys List (2nd Ed. §5.4)"
def sorted_dict_keys(d, reverse=False):
    """Returns a list of the keys in a dict, sorted by the values."""
    return sorted(d.keys(), key=d.__getitem__, reverse=reverse)
endsnippet

snippet dictsort "Sorting a Dict by Keys, Return Items List (2nd Ed. §5.4)"
def dict_items_sorted_by_keys(d, reverse=False):
    """Returns a list of items in a dict, sorted by the keys."""
    return sorted(d.items(), key=lambda x: x[0], reverse=reverse)
endsnippet

snippet dictsort "Sorting a Dict by Values, Return Items List (2nd Ed. §5.4)"
def dict_items_sorted_by_value(d, reverse=False):
    """Returns a list of items in a dict, sorted by the values."""
    return sorted(d.items(), key=lambda x: x[1], reverse=reverse)
endsnippet

snippet subdict "Extracting a Subset of a Dict (2nd Ed. §4.13 p.171)"
def sub_dict_strict(somedict, somekeys):
    return dict([(k, somedict[k]) for k in somekeys])
endsnippet

snippet subdictrem "Extracting & Removing a Subset of a Dict (2nd Ed. §4.13)"
def sub_dict_remove(somedict, somekeys):
    return dict([(k, somedict.pop(k)) for k in somekeys])
endsnippet

snippet invdict "Inverting a Dict (2nd Ed. §4.14)"
def invert_dict(d):
    return dict([(v, k) for k, v in d.items()])
endsnippet

snippet invdictfast "Inverting a Dict with itertools (2nd Ed. §4.14); Py <= 2.7"
from itertools import izip
def invert_dict_fast(d):
    return dict(izip(d.itervalues(), d.iterkeys()))
endsnippet

snippet mindict "Calculating with Dictionaries (3rd Ed. §1.8)"
min_value = min(zip(dict.values(), dict.keys()))
endsnippet

snippet maxdict "Calculating with Dictionaries (3rd Ed. §1.8)"
max_value = max(zip(dict.values(), dict.keys()))
endsnippet

snippet dedupe "Removing Duplicates from a Seq While Maintaining Order (3rd Ed. §1.10)"
def dedupe(items, key=None):
    seen = set()
    for item in items:
        val = item if key is None else key(item)
        if val not in seen:
	    yeild item
	    seen.add(val)
endsnippet

snippet nsmallestlist "Getting the First Few Smallest Items of a Seq (2nd Ed. §5.8)"
import heapq
def smallest(n, data):
    return heapq.nsmallest(n, data)
endsnippet

snippet nlargestlist "Getting the n Largest Items of a Seq"
import heapq
def largest(n, data):
    return heapq.nlargest(n, data)
endsnippet

snippet token "Tokenising Text (3rd Ed. §2.18)" b
import re
from collections import namedtuple

token_spec = [
    ('STRIP',  r'^[ \t]+|[ \t]+$'),
    ('NUMBER', r'\d+(\.\d*)?'),
    ('TEST',   r'\btest(er|ing|ed|s)?\b'),
    ('HEX',    r'#?([a-f0-9]{3}){1,2}'),
    ('WS',     r'\s+')
]
master_pat = re.compile('|'.join('(?P<{}>{})'.format(*pair) for pair in token_spec))
Token = namedtuple('Token', ['type', 'value'])

def generate_tokens(pat, text):
    scanner = pat.scanner(text)
    for m in iter(scanner.match, None):
        token = Token(m.lastgroup, m.group())
        if token.type != 'WS'
            yield token
endsnippet

snippet daterange "Generating a Date Range (3rd Ed. §3.14)"
from datetime import datetime, timedelta, date
def date_range(start, stop, step):
    while start < stop:
    yield start
    start += step

for d in date_range(date.today(),
                    datetime(2016, 1, 1),
                    timedelta(hours=12)):
    print(d)
endsnippet

snippet erat "Infinite Prime Generator using Sieve of Eratosthenes"
def eratosthenes():
    from itertools import count
    # keep track of all composites found as keys in a dict
    # they will be mapped to their first-found prime factor
    d = {}
    # count forever from 2
    for q in count(2):
        p = d.pop(q, None)
        if p is None:
            # q not a key in d, so q is prime, therefore, yield it
            yield q
            # mark q^2 as not-prime (with q as first-found prime factor)
            # this ensures that from q^2, multiples of q will be checked
            # for compositeness later (lower multiples of q will be
            # checked by other primes)
            d[q*q] = q
        else:
            # find the lowest not-yet-found composite by adding multiples of
            # its first-found prime factor
            x = q + p
            while x in d:
                x += p
            # map the newly found compsite to its prime factor
            d[x] = p
            # this algorithm produces a dict with length corresponding to the
            # number of primes currently found -- the values in the dict; the
            # keys are the the lowest factor of that prime that is not already
            # a key in the dict or already seen
endsnippet

snippet sep "3-comment-based separator/header/title, 79-wide"
#------------------------------------------------------------------------------
# ${1:Title}
endsnippet

snippet init "define init method"
def __init__(self):
endsnippet
