priority -50

extends go

snippet for "For loop" b
for ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet fori "Integer for loop" b
for ${1:i} := 0; $1 < ${2:N}; $1++ {
	${0:${VISUAL}}
}
endsnippet

snippet forr "For range loop" b
for ${2:name} := range ${1:collection} {
	${0:${VISUAL}}
}
endsnippet

snippet herr "HTTP error handling"
if err != nil {
	http.Error(w, err.Error(), http.StatusInternalServerError)
	log.Printf("handling %q: %v", r.RequestURI, err)
	return
}
endsnippet

snippet errh "Function adapter (aka Decorator) for handling HTTP errors"
func errorHandler(f func(http.ResponseWriter, *http.Request) error) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		err := f(w, r)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			log.Printf("handling %q: %v", r.RequestURI, err)
		}
	}
}
endsnippet

snippet index "Returns first index of target in collection" b
// Returns the first index of the target string 't', or
// -1 if no match is found.
func Index(vs []string, t string) int {
	for i, v := range vs {
		if v == t {
			return i
		}
	}
	return -1
}
endsnippet

snippet includes "Returns true if the target is in collection" b
// Returns 'true' if the target string t is in the
// slice.
func Includes(vs []string, t string) bool {
	return Index(vs, t) >= 0
}
endsnippet

snippet any "Returns true if one of the f(x) is in collection" b
// Returns 'true' if one of the strings in the slice
// satisfies the predicate 'f'.
func Any(vs []string, f func(string) bool) bool {
	for _, v := range vs {
		if f(v) {
			return true
		}
	}
	return false
}
endsnippet

snippet all "Returns true if f(x) if true for all x in collection" b
// Returns `true` if all of the strings in the slice
// satisfy the predicate `f`.
func All(vs []string, f func(string) bool) bool {
	for _, v := range vs {
		if !f(v) {
			return false
		}
	}
	return true
}
endsnippet

snippet filter "Returns a new slice of those x for which f(x) is true" b
// Returns a new slice containing all strings in the
// slice that satisfy the predicate `f`.
func Filter(vs []string, f func(string) bool) []string {
	vsf := make([]string, 0)
	for _, v := range vs {
		if f(v) {
			vsf = append(vsf, v)
		}
	}
	return vsf
}
endsnippet

snippet map "Returns a new slice containing result of f(x) for all elements" b
// Returns a new slice containing the results of applying
// the function `f` to each string in the original slice.
func Map(vs []string, f func(string) string) []string {
	vsm := make([]string, len(vs))
	for i, v := range vs {
		vsm[i] = f(v)
	}
	return vsm
}
endsnippet

snippet p "fmt.Print"
fmt.Print
endsnippet

snippet pl "fmt.Println"
fmt.Println
endsnippet

snippet pf "fmt.Printf"
fmt.Printf
endsnippet

snippet fp "fmt.Fprint"
fmt.Fprint
endsnippet

snippet fpl "fmt.Fprintln"
fmt.Fprintln
endsnippet

snippet fpf "fmt.Fprintf"
fmt.Fprintf
endsnippet

snippet sp "fmt.Sprint"
fmt.Sprint
endsnippet

snippet spf "fmt.Sprintf"
fmt.Sprintf
endsnippet

snippet spl "fmt.Sprintln"
fmt.Sprintln
endsnippet

snippet en "errors.New"
errors.New
endsnippet
