"------------------------------------------------------------------------------
" vimrc intended for Python, Rust, JS/TS, Go, Ruby, Clojure, OCaml
" by Matt Westcott (mattwestcott.co.uk)

set nocompatible

"------------------------------------------------------------------------------
" vim-plug

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'airblade/vim-gitgutter'
Plug 'airblade/vim-rooter'
Plug 'fatih/vim-go'
Plug 'guns/vim-sexp'
Plug 'junegunn/gv.vim'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --all'}
Plug 'junegunn/fzf.vim'
Plug 'machakann/vim-highlightedyank'
Plug 'Raimondi/delimitMate'
Plug 'rust-lang/rust.vim'
Plug 'sheerun/vim-polyglot'
Plug 'SirVer/ultisnips'
Plug 'sjl/gundo.vim'
Plug 'sjl/vitality.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dadbod'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sexp-mappings-for-regular-people'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'Valloric/ListToggle'
Plug 'Valloric/YouCompleteMe', {'do': './install.py --clang-completer --rust-completer --ts-completer --gocode-completer'}
Plug 'w0rp/ale'
Plug 'Yggdroot/indentLine'
call plug#end()

"------------------------------------------------------------------------------
" General Settings

if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

set background=dark
colorscheme yellow

filetype plugin indent on
syntax on

let g:terminal_ansi_colors = [
\ "#282828",
\ "#fb5f4d",
\ "#98971a",
\ "#d79921",
\ "#83a598",
\ "#b16286",
\ "#689d6a",
\ "#d5c4a1",
\ "#928374",
\ "#fc7566",
\ "#b8bd26",
\ "#fabd2f",
\ "#92b0a4",
\ "#d3869b",
\ "#8ec07c",
\ "#ebdbb2",
\]

" Cursor styles
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[0 q"

if has("gui_running")
    set transp=2
    set linespace=2
    set guioptions-=T
    set guioptions-=l
    set guioptions-=L
    set guioptions-=r
    set guioptions-=R
    set guioptions-=m
    set guioptions-=M
    set guioptions-=e
    set guicursor+=a:blinkon0
    set guifont=SF\ Mono:h16
endif

" Undo
set undofile
set undolevels=1000
set undodir=/tmp
set backupdir=/tmp
set dir=/tmp

" History
set history=1000

" Visual
set ruler
set showmode
set lazyredraw
set nocursorline
set scrolloff=3
set laststatus=2
set showtabline=0
set conceallevel=0
set foldlevelstart=99
set diffopt=vertical,filler

" Statusline
set statusline=
set statusline+=%f
set statusline+=\ %m
set statusline+=%=
set statusline+=\ %p%%
set statusline+=\ %l:%c

" Search
set incsearch
set ignorecase
set smartcase
set nohlsearch

" Split
set splitbelow
set splitright

" Indent
set smarttab
set tabstop=8
set expandtab
set autoindent
set copyindent
set shiftround
set shiftwidth=4
set softtabstop=4

" Misc
set hidden
set mouse=a
set gdefault
set visualbell
set nojoinspaces
set noerrorbells
set updatetime=100
set clipboard=unnamed
set backspace=indent,eol,start

if has("nvim")
    let g:python_host_prog = $WORKON_HOME . "/pynvim2/bin/python"
    let g:python3_host_prog = $WORKON_HOME . "/pynvim3/bin/python"
    tnoremap <Esc> <C-\><C-n>
endif

"------------------------------------------------------------------------------
" FileType-Specific Settings

autocmd FileType c
    \ setlocal shiftwidth=4 |
    \ setlocal tabstop=4 |
    \ setlocal expandtab

autocmd FileType cpp
    \ setlocal shiftwidth=2 |
    \ setlocal tabstop=4

autocmd FileType dhall
    \ setlocal shiftwidth=2 |
    \ setlocal expandtab

autocmd FileType go
    \ setlocal shiftwidth=8 |
    \ setlocal noexpandtab

autocmd FileType html,css,javascript,typescriptreact
    \ setlocal textwidth=90 |
    \ setlocal shiftwidth=2 |
    \ setlocal expandtab

autocmd FileType lisp,clojure,scheme
    \ setlocal shiftwidth=2

autocmd FileType markdown.mdx
    \ setlocal textwidth=80 |
    \ setlocal shiftwidth=2 |
    \ setlocal expandtab |
    \ setlocal conceallevel=0

autocmd FileType python,rst
    \ setlocal textwidth=88 |
    \ setlocal shiftwidth=4 |
    \ setlocal expandtab

autocmd FileType ocaml
    \ setlocal shiftwidth=2 |
    \ setlocal expandtab

autocmd FileType ruby
    \ setlocal shiftwidth=2 |
    \ setlocal expandtab

autocmd FileType rust
    \ setlocal textwidth=99 |
    \ setlocal shiftwidth=4 |
    \ setlocal expandtab

autocmd FileType sh
    \ setlocal textwidth=88

autocmd FileType sql
    \ setlocal shiftwidth=2 |
    \ setlocal expandtab

autocmd BufWritePre * :%s/\s\+$//e
autocmd FileType gitcommit setlocal spell! spelllang=en_gb
autocmd FileType gitconfig setlocal shiftwidth=8

autocmd BufNewFile,BufRead *bash* let g:is_bash=1
autocmd BufNewFile,BufRead \*.{md,mdwn,mkd,mkdn,mark\*} setf markdown
autocmd BufNewFile,BufRead *.erl,*.es,*.hrl,*.yaws,*.xrl setf erlang

"------------------------------------------------------------------------------
" Mappings (see also Plugin section)

let mapleader=" "

" UK keyboards...
inoremap ยง <ESC>
vnoremap ยง <ESC>

" Keep search matches in the middle of the window.
nnoremap * *zzzv
nnoremap # #zzzv
nnoremap n nzzzv
nnoremap N Nzzzv

noremap Q gq
nnoremap Q gqap
nnoremap Y y$
nnoremap j gj
nnoremap k gk
vnoremap < <gv
vnoremap > >gv

" The secret sauce.
noremap <C-h> b
noremap <C-l> w
noremap <C-j> 10gj
noremap <C-k> 10gk
noremap <C-n> <C-^>
noremap <C-b> :bn<CR>

" Window switching.
noremap <leader>h <C-w>h
noremap <leader>l <C-w>l
noremap <leader>k <C-w>k
noremap <leader>j <C-w>j

" These create newlines like o and O but stay in normal mode.
nnoremap <silent> zj o<Esc>k
nnoremap <silent> zk O<Esc>j

nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>

" Replace what is under the cursor globally, prompted for each word.
nnoremap <leader>r :%s/\<<C-r><C-w>\>//c<left><left>

" :%s/old/new/c replaces 'old' with 'new' globally, prompted for each word.
nnoremap <leader>R :%s//c<left><left>

" Editing and loading vimrc.
noremap <silent> <leader>v :e $MYVIMRC<CR>
noremap <silent> <leader>.v :so $MYVIMRC<CR>
nnoremap <leader>U :PlugUpdate<CR>

" Echo the number under the cursor as binary, useful for bitwise operations
nnoremap <silent> gb :call EchoBinary()<CR>
function! EchoBinary()
    echo printf("%08b", expand('<cword>'))
endfunction

" Toggle functions.
nnoremap <silent> <leader>Z :call ToggleNumber()<CR>
function! ToggleNumber()
    set number!
endfunction

nnoremap <silent> <leader>X :call ToggleSyntax()<CR>
function! ToggleSyntax()
    if exists("g:syntax_on") | syntax off | else | syntax enable | endif
endfunction

nnoremap <silent> <leader>C :call ToggleColorColumn()<CR>
function! ToggleColorColumn()
  if &colorcolumn != ''
    setlocal colorcolumn&
  else
    setlocal colorcolumn=+1
  endif
endfunction

nnoremap <silent><leader>S :call ToggleStatus()<CR>
function! ToggleStatus()
    if &laststatus == 1
        set laststatus=2
    else
        set laststatus=1
    endif
endfunction

nnoremap <silent><leader>B :call ToggleTabLine()<CR>
function! ToggleTabLine()
    if &showtabline == 0
        set showtabline=2
    else
        set showtabline=0
    endif
endfunction

"------------------------------------------------------------------------------
" fzf all the things

let g:fzf_layout = {'down': '50%'}
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(blue)(%an) %C(green)%cr"'
let g:fzf_action = {
\    'ctrl-t': 'tab split',
\    'ctrl-v': 'vsplit',
\    'alt-enter': 'split'
\}

nnoremap <leader><leader> :Ag<CR>
nnoremap ,, :History<CR>

nnoremap ,t :Files<CR>
nnoremap ,b :Buffers<CR>
nnoremap ,p :GitFiles<CR>
nnoremap ,a :Ag<space>
nnoremap ,g :Ag<space><C-R><C-W><CR>
nnoremap ,v :FZF ~<CR>
nnoremap ,l :Locate<space>
nnoremap ,c :Commits<CR>
nnoremap ,C :BCommits<CR>
nnoremap ,/ :Lines<CR>
nnoremap ,: :Commands<CR>
nnoremap ,w :Windows<CR>
nnoremap ,s :Snippets<CR>
nnoremap ,M :Maps<CR>
nnoremap ,m :Marks<CR>
nnoremap ,H :Helptags<CR>
nnoremap ,S :Colors<CR>
nnoremap ,h: :History:<CR>
nnoremap ,h/ :History/<CR>

"------------------------------------------------------------------------------
" ALE

let g:ale_sign_column_always = 0
let g:ale_lint_on_text_changed = 'never'
let g:ale_fix_on_save = 1
let g:ale_python_mypy_options = '--ignore-missing-imports'
let g:ale_python_flake8_options = '--select=F,C9 --max-complexity=10 --ignore=FI'

nnoremap <leader>al :ALELint<CR>
nnoremap <leader>ai :ALEInfo<CR>
nnoremap <leader>af :ALEFix<CR>
nnoremap <leader>an :ALENext<CR>
nnoremap <leader>ap :ALEPrevious<CR>

let g:ale_linters = {
\    'python': ['flake8'],
\    'rust': ['cargo', 'rls'],
\    'javascript': ['eslint'],
\    'typescriptreact': ['eslint'],
\    'css': ['eslint'],
\}

let g:ale_fixers = {
\    'python': ['isort', 'yapf'],
\    'rust': ['rustfmt'],
\    'javascript': ['eslint'],
\    'typescriptreact': ['eslint'],
\    'css': ['eslint'],
\}

"------------------------------------------------------------------------------
" dhall-vim (via polyglot)

let g:dhall_format = 1

"------------------------------------------------------------------------------
" Turn off SQL completion to avoid error connected to 'dbext' plugin

let g:omni_sql_no_default_maps = 1

"------------------------------------------------------------------------------
" vim-rooter

let g:rooter_silent_chdir = 1
let g:rooter_resolve_links = 1

"------------------------------------------------------------------------------
" indentLine

let g:indentLine_color_term = 243
let g:indentLine_color_gui = "#7c6f64"
let g:indentLine_fileTypeExclude = ['markdown']

"------------------------------------------------------------------------------
" vim-highlightedyank

let g:highlightedyank_highlight_duration = 50

"------------------------------------------------------------------------------
" Clang-format

noremap <leader>cf :pyf ~/dotfiles/vim/misc/clang-format.py<CR>

"------------------------------------------------------------------------------
" markdown syntax

let g:markdown_syntax_conceal = 0
let g:markdown_fenced_languages = [
\    'python', 'rust', 'go', 'c', 'clojure', 'haskell',
\    'bash=sh', 'zsh', 'html', 'css', 'javascript'
\]

" https://github.com/plasticboy/vim-markdown via polyglot
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
let g:vim_markdown_frontmatter = 1
let g:vim_json_syntax_conceal = 0

"------------------------------------------------------------------------------
" ListToggle

let g:lt_location_list_toggle_map = '<leader>i'
let g:lt_quickfix_list_toggle_map = '<leader>u'
let g:lt_height = 10

"------------------------------------------------------------------------------
" EasyAlign

vmap <Enter> <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

"------------------------------------------------------------------------------
" vim-fugitive

nmap <leader>s :Gstatus<CR>gg<C-n>
nnoremap <leader>d :Gdiff<CR>
nnoremap <leader>b :Gblame<CR>

"------------------------------------------------------------------------------
" gv.vim

nmap <leader>G :GV<CR>
nmap <leader>V :GV!<CR>

"------------------------------------------------------------------------------
" vim-go

let g:go_fmt_command = "goimports"
let g:go_auto_type_info = 0

" Since 'g' is taken by GoTo commands...
nmap <leader>or <Plug>(go-run)
nmap <leader>ob <Plug>(go-build)
nmap <leader>ot <Plug>(go-test)
nmap <leader>oc <Plug>(go-coverage)
nmap <leader>os <Plug>(go-implements)
nmap <leader>oi <Plug>(go-info)
nmap <leader>oe <Plug>(go-rename)
nmap <leader>ds <Plug>(go-def-split)
nmap <leader>dv <Plug>(go-def-vertical)
nmap <leader>dt <Plug>(go-def-tab)

"------------------------------------------------------------------------------
" delimitMate

let delimitMate_matchpairs = "(:),[:],{:}"
let delimitMate_quotes = ""
let delimitMate_expand_cr = 1

"------------------------------------------------------------------------------
" YouCompleteMe

let g:ycm_complete_in_strings = 1
let g:ycm_complete_in_comments = 0
let g:ycm_seed_identifiers_with_syntax = 0
let g:ycm_min_num_of_chars_for_completion = 3
let g:ycm_min_num_identifier_candidate_chars = 6
let g:ycm_semantic_triggers = {'haskell' : ['.']}
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_extra_conf_globlist = ['~/repos/*', '!~/*']

nnoremap <leader>g :YcmCompleter GoTo<CR>
nnoremap <leader>yd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>yc :YcmCompleter GoToDeclaration<CR>

"------------------------------------------------------------------------------
" UltiSnips

let g:snips_author = 'Matt Westcott'
let g:UltiSnipsExpandTrigger = "<C-e>"
let g:UltiSnipsEditSplit = "vertical"
let g:UltiSnipsListSnippets = "<C-x>"
let g:ultisnips_python_style = "google"
let g:ultisnips_python_quoting_style = "single"
let g:ultisnips_python_triple_quoting_style = "double"
let g:UltiSnipsJumpBackwardTrigger = "<Left>"
let g:UltiSnipsJumpForwardTrigger = "<Right>"
let g:UltiSnipsSnippetsDir = "~/dotfiles/vim/ultisnips"
let g:UltiSnipsSnippetDirectories=[$HOME.'/dotfiles/vim/ultisnips']

"------------------------------------------------------------------------------
" merlin (assumes an installation via OPAM)

let g:opamshare = substitute(system('opam config var share'),'\n$','','''')
execute "set rtp+=" . g:opamshare . "/merlin/vim"

"------------------------------------------------------------------------------
" ocp-indent (assumes an installation via OPAM)

autocmd FileType ocaml execute "set rtp+=" . g:opamshare . "/ocp-indent/vim/indent/ocaml.vim"
