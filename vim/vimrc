"------------------------------------------------------------------------------
" vimrc intended for Python, Go, C, Clojure, Haskell
" by Matt Westcott (mattwestcott.co.uk)

set nocompatible

"------------------------------------------------------------------------------
" vim-plug

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'airblade/vim-gitgutter'
Plug 'airblade/vim-rooter'
Plug 'ap/vim-buftabline'
Plug 'davidoc/taskpaper.vim'
Plug 'fatih/vim-go'
Plug 'guns/vim-sexp'
Plug 'junegunn/gv.vim'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --all'}
Plug 'junegunn/fzf.vim'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'junegunn/seoul256.vim'
Plug 'majutsushi/tagbar', {'on': 'TagbarToggle'}
Plug 'michaeljsmith/vim-indent-object'
Plug 'Yggdroot/indentLine'
Plug 'Raimondi/delimitMate'
Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'}
Plug 'sheerun/vim-polyglot'
Plug 'SirVer/ultisnips'
Plug 'sjl/gundo.vim'
Plug 'sjl/vitality.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fireplace', {'for': 'clojure'}
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'
Plug 'tpope/vim-projectionist', {'for': 'clojure'}
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-salve', {'for': 'clojure'}
Plug 'tpope/vim-sexp-mappings-for-regular-people'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'Valloric/ListToggle'
Plug 'Valloric/YouCompleteMe', {'do': './install.py --gocode-completer --clang-completer'}
Plug 'Valloric/vim-operator-highlight'
Plug 'w0rp/ale'
call plug#end()

"------------------------------------------------------------------------------
" General Settings

set background=dark
colorscheme brown

filetype plugin indent on
syntax on

" Undo
set undofile
set undolevels=1000
set undodir=/tmp
set backupdir=/tmp
set dir=/tmp

" History
set history=1000

" Visual
set ruler
set showmode
set lazyredraw
set cursorline
set scrolloff=3
set laststatus=2
set showtabline=0
set conceallevel=0
set foldlevelstart=99
set diffopt=vertical,filler

" Statusline
set statusline=
set statusline+=%f
set statusline+=\ %m
set statusline+=%=
set statusline+=\ %p%%
set statusline+=\ %l:%c

" Search
set incsearch
set ignorecase
set smartcase

" Split
set splitbelow
set splitright

" Indent
set smarttab
set tabstop=8
set expandtab
set autoindent
set copyindent
set shiftround
set shiftwidth=4
set softtabstop=4

" Misc
set hidden
set mouse=a
set gdefault
set visualbell
set nojoinspaces
set noerrorbells
set clipboard=unnamed
set backspace=indent,eol,start

if has("gui_running")
    set transp=2
    set linespace=2
    set guioptions-=T
    set guioptions-=l
    set guioptions-=L
    set guioptions-=r
    set guioptions-=R
    set guioptions-=m
    set guioptions-=M
    set guioptions-=e
    set guicursor=a:blinkon0
    set guifont=Menlo:h12
endif

"------------------------------------------------------------------------------
" FileType-Specific Settings

autocmd FileType c
    \ setlocal shiftwidth=4 |
    \ setlocal expandtab

autocmd FileType cpp
    \ setlocal shiftwidth=2 |

autocmd FileType go
    \ setlocal shiftwidth=8 |
    \ setlocal noexpandtab

autocmd FileType html
    \ setlocal shiftwidth=2

autocmd FileType lisp,clojure,scheme
    \ setlocal shiftwidth=2

autocmd FileType python
    \ setlocal textwidth=120 |
    \ setlocal shiftwidth=4 |
    \ setlocal expandtab

autocmd FileType ocaml
    \ setlocal shiftwidth=2 |
    \ setlocal expandtab

autocmd FileType sh
    \ setlocal textwidth=80

autocmd FileType markdown
    \ syntax match Comment /\%^---\_.\{-}\.\.\.$/ " YAML front-matter

autocmd FileType taskpaper
    \ setlocal shiftwidth=8

autocmd BufWritePre * :%s/\s\+$//e
autocmd BufNewFile,BufRead *bash* let g:is_bash=1
autocmd FileType gitcommit setlocal spell! spelllang=en_gb
autocmd FileType vim,html let b:delimitMate_matchpairs = "(:),[:],{:}"
autocmd BufNewFile,BufRead \*.{md,mdwn,mkd,mkdn,mark\*} set filetype=markdown
autocmd BufNewFile,BufRead *.erl,*.es,*.hrl,*.yaws,*.xrl setf erlang

"------------------------------------------------------------------------------
" Mappings (see also Plugin section)

let mapleader=" "

" UK keyboards...
inoremap ยง <ESC>

" Keep search matches in the middle of the window.
nnoremap * *zzzv
nnoremap # #zzzv
nnoremap n nzzzv
nnoremap N Nzzzv

noremap Q gq
nnoremap Q gqap
nnoremap Y y$
nnoremap j gj
nnoremap k gk
vnoremap < <gv
vnoremap > >gv

" The secret sauce.
noremap <C-h> b
noremap <C-l> w
noremap <C-j> 10gj
noremap <C-k> 10gk
noremap <C-n> <C-^>

" Window switching.
noremap <leader>h <C-w>h
noremap <leader>l <C-w>l
noremap <leader>k <C-w>k
noremap <leader>j <C-w>j

" These create newlines like o and O but stay in normal mode.
nnoremap <silent> zj o<Esc>k
nnoremap <silent> zk O<Esc>j

nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>Q :qa<CR>
noremap <leader>cd :cd %:p:h<cr>

" Replace what is under the cursor globally, prompted for each word.
nnoremap <leader>r :%s/\<<C-r><C-w>\>//c<left><left>

" :%s/old/new/c replaces 'old' with 'new' globally, prompted for each word.
nnoremap <leader>R :%s//c<left><left>

" Editing and loading vimrc.
noremap <silent> <leader>v :e $MYVIMRC<CR>
noremap <silent> <leader>.v :so $MYVIMRC<CR>
nnoremap <leader>U :PlugUpdate<CR>

" Toggle functions.
nnoremap <silent> <leader>Z :call ToggleNumber()<CR>
function! ToggleNumber()
    set number!
endfunction

nnoremap <silent> <leader>X :call ToggleSyntax()<CR>
function! ToggleSyntax()
    if exists("g:syntax_on") | syntax off | else | syntax enable | endif
endfunction

nnoremap <silent> <leader>C :call ToggleColorColumn()<CR>
function! g:ToggleColorColumn()
  if &colorcolumn != ''
    setlocal colorcolumn&
  else
    setlocal colorcolumn=+1
  endif
endfunction

nnoremap <silent><leader>S :call ToggleStatus()<CR>
function! ToggleStatus()
    if &laststatus == 1
        set laststatus=2
    else
        set laststatus=1
    endif
endfunction

nnoremap <silent><leader>B :call ToggleTabLine()<CR>
function! ToggleTabLine()
    if &showtabline == 0
        set showtabline=2
    else
        set showtabline=0
    endif
endfunction

"------------------------------------------------------------------------------
" fzf all the things

let g:fzf_layout = {'down': '100%'}

nnoremap <leader>/ :BLines<CR>
nnoremap <leader>t :Files<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>m :History<CR>
nnoremap <leader>p :GitFiles<CR>

nnoremap ,, :Ag<space><C-R><C-W><CR>
nnoremap ,g :Ag<space>
nnoremap ,v :FZF ~<CR>
nnoremap ,l :Locate<space>
nnoremap ,c :Commits<CR>
nnoremap ,b :BCommits<CR>
nnoremap ,/ :Lines<CR>
nnoremap ,: :Commands<CR>
nnoremap ,w :Windows<CR>
nnoremap ,s :Snippets<CR>
nnoremap ,m :Maps<CR>
nnoremap ,M :Marks<CR>
nnoremap ,H :Helptags<CR>
nnoremap ,C :Colors<CR>
nnoremap ,h: :History:<CR>
nnoremap ,h/ :History/<CR>

"------------------------------------------------------------------------------
" ALE

let g:ale_sign_column_always = 0
let g:ale_fix_on_save = 1
let g:ale_python_mypy_options = '--ignore-missing-imports'
let g:ale_python_flake8_options = '--select=F,C9 --max-complexity=10'

nnoremap <leader>ai :ALEInfo<CR>
nnoremap <leader>af :ALEFix<CR>
nnoremap <leader>an :ALENext<CR>
nnoremap <leader>ap :ALEPrevious<CR>

let g:ale_fixers = {
\    'python': ['isort', 'yapf'],
\}

"------------------------------------------------------------------------------
" buftabline

let g:buftabline_numbers = 2
let g:buftabline_show = 0

nmap <leader>1 <Plug>BufTabLine.Go(1)
nmap <leader>2 <Plug>BufTabLine.Go(2)
nmap <leader>3 <Plug>BufTabLine.Go(3)
nmap <leader>4 <Plug>BufTabLine.Go(4)
nmap <leader>5 <Plug>BufTabLine.Go(5)
nmap <leader>6 <Plug>BufTabLine.Go(6)
nmap <leader>7 <Plug>BufTabLine.Go(7)
nmap <leader>8 <Plug>BufTabLine.Go(8)
nmap <leader>9 <Plug>BufTabLine.Go(9)
nmap <leader>0 <Plug>BufTabLine.Go(10)

"------------------------------------------------------------------------------
" vim-rooter

let g:rooter_silent_chdir = 1
let g:rooter_resolve_links = 1

"------------------------------------------------------------------------------
" indentLine

let g:indentLine_color_term = 243

"------------------------------------------------------------------------------
" vim-operator-highlight

let g:ophigh_highlight_link_group = "Operator"
let g:ophigh_filetypes_to_ignore = { "haskell": 1,
                                   \ "ocaml": 1,
                                   \ "erlang": 1,
                                   \ "clojure": 1,
                                   \ "lisp": 1,
                                   \ "zsh": 1,
                                   \ "bash": 1,
                                   \ "sh": 1,
                                   \ "taskpaper": 1,
                                   \ "text": 1,
                                   \ "gitcommit": 1 }

"------------------------------------------------------------------------------
" rainbow-parentheses

nnoremap <leader>P :RainbowParentheses!!<CR>
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
let g:rainbow#blacklist = [203, 253, 231, 224, 121, 159, 72, '#f6f6f6']

"------------------------------------------------------------------------------
" vim-fireplace

autocmd FileType clojure nnoremap <leader><leader> :Eval<CR>

"------------------------------------------------------------------------------
" NERDTree

nnoremap <leader>N :NERDTreeToggle<CR>

"------------------------------------------------------------------------------
" TagBar

nnoremap <leader>T :TagbarToggle<CR>

"------------------------------------------------------------------------------
" NeoVim

let g:python_host_prog = '/usr/local/bin/python'

"------------------------------------------------------------------------------
" python-syntax

let g:python_highlight_builtins = 0

"------------------------------------------------------------------------------
" rust.vim

let g:rustfmt_autosave = 1

"------------------------------------------------------------------------------
" Clang-format

noremap <leader>cf :pyf ~/dotfiles/vim/misc/clang-format.py<CR>

"------------------------------------------------------------------------------
" markdown syntax

let g:markdown_syntax_conceal = 0
let g:markdown_fenced_languages = ['python', 'go', 'c', 'clojure', 'haskell',
                                  \ 'bash=sh', 'zsh', 'html', 'css', 'javascript']

"------------------------------------------------------------------------------
" ListToggle

let g:lt_location_list_toggle_map = '<leader>i'
let g:lt_quickfix_list_toggle_map = '<leader>u'
let g:lt_height = 10

"------------------------------------------------------------------------------
" EasyAlign

vmap <Enter> <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

"------------------------------------------------------------------------------
" vim-fugitive

nmap <leader>s :Gstatus<CR>gg<C-n>
nnoremap <leader>d :Gdiff<CR>

"------------------------------------------------------------------------------
" gv.vim

nmap <leader>G :GV<CR>o
nmap <leader>V :GV!<CR>o

"------------------------------------------------------------------------------
" vim-go

let g:go_fmt_command = "goimports"
let g:go_auto_type_info = 0

" Since 'g' is taken by GoTo commands...
nmap <leader>or <Plug>(go-run)
nmap <leader>ob <Plug>(go-build)
nmap <leader>ot <Plug>(go-test)
nmap <leader>oc <Plug>(go-coverage)
nmap <leader>os <Plug>(go-implements)
nmap <leader>oi <Plug>(go-info)
nmap <leader>oe <Plug>(go-rename)
nmap <leader>ds <Plug>(go-def-split)
nmap <leader>dv <Plug>(go-def-vertical)
nmap <leader>dt <Plug>(go-def-tab)

"------------------------------------------------------------------------------
" TagBar

let g:tagbar_sort = 0
let g:tagbar_singleclick = 1
let g:tagbar_show_visibility = 1
let g:tagbar_iconchars = ['โธ', 'โพ']

"------------------------------------------------------------------------------
" delimitMate

let delimitMate_quotes = ""
let delimitMate_expand_cr = 1

"------------------------------------------------------------------------------
" YouCompleteMe

let g:ycm_complete_in_strings = 1
let g:ycm_complete_in_comments = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_min_num_identifier_candidate_chars = 4
let g:ycm_semantic_triggers = {'haskell' : ['.']}
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_extra_conf_globlist = ['~/repos/*', '!~/*']

nnoremap <leader>g :YcmCompleter GoTo<CR>
nnoremap <leader>yd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>yc :YcmCompleter GoToDeclaration<CR>

"------------------------------------------------------------------------------
" UltiSnips

let g:snips_author = 'Matt Westcott'
let g:UltiSnipsExpandTrigger = "``"
let g:UltiSnipsEditSplit = "vertical"
let g:UltiSnipsListSnippets = "<C-x>"
let g:ultisnips_python_style = "google"
let g:ultisnips_python_quoting_style = "double"
let g:ultisnips_python_triple_quoting_style = "double"
let g:UltiSnipsJumpBackwardTrigger = "<Left>"
let g:UltiSnipsJumpForwardTrigger = "<Right>"
let g:UltiSnipsSnippetsDir = "~/dotfiles/vim/ultisnips"
let g:UltiSnipsSnippetDirectories=[$HOME.'/dotfiles/vim/ultisnips']

"------------------------------------------------------------------------------
" merlin (assumes an installation via OPAM)

let g:opamshare = substitute(system('opam config var share'),'\n$','','''')
execute "set rtp+=" . g:opamshare . "/merlin/vim"

"------------------------------------------------------------------------------
" ocp-indent (assumes an installation via OPAM)

set rtp^="/Users/mattwestcott/.opam/system/share/ocp-indent/vim"

"------------------------------------------------------------------------------
" fuzzynotes

let g:notes_dir = $NOTESDIR

function! g:Slugify(str)
    return join(split(tolower(a:str), '\W\+'), '-')
endfunction

function! g:NoteTemplate(desc)
    call append(0, "---")
    call append(1, "tags: []")
    call append(2, "description: " . a:desc)
    call append(3, "...")
endfunction

function! g:NoteSink(output)
    if len(a:output) == 2
        let query = a:output[0]
        let key = a:output[1]
        if key == "enter"
            let filename = g:Slugify(query) . ".md"
            exec "edit" join([g:notes_dir, filename], "/")
            call g:NoteTemplate(query)
        endif
    elseif len(a:output) == 3
        let key = a:output[1]
        let data = a:output[2]
        " Data is expected as '{filename}:{description} | {modified} | {tags}'
        let filename = split(data, ":")[0]
        if key == "ctrl-r"
            exec "!rm -i" join([g:notes_dir, filename], "/")
        else
            exec "edit" join([g:notes_dir, filename], "/")
        endif
    endif
endfunction

command! Notes call fzf#run({
  \ 'source':  'fuzzynotes show',
  \ 'sink*':    function('g:NoteSink'),
  \ 'down':    '~40%',
  \ 'options': '--exact --ansi -d ":" --with-nth 2.. --prompt="Notes> " ' .
  \            '--expect=enter,ctrl-r --print-query'
  \})

nnoremap <leader>n :Notes<CR>
